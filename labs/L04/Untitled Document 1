#lang htdp/bsl
(define-struct Z ())
(define-struct S (pred))
(define (pred nat)
	(cond
		[(Z? nat) (error "can't apply pred to Z")]
		[(S? nat) (S-pred nat)]))

(define (plus nat1 nat2)
  (cond
    [(Z? nat1) nat2]
    [(S? nat1) (make-S (plus (S-pred nat1) nat2))]))

(define (plus nat1 nat2)
	(cond
		[(Z? nat1) nat2]
		[(S? nat1) (make-S (plus (S-pred nat1) nat2))))


(define zero (make-Z))
(define one (make-S zero))
(define two (make-S one))
(define three (make-S two)) **Maybe??**

(check-expect (pred three) two)
(check-expect (pred two) one)
(check-error (pred zero) "can't apply pred to Z")

(define (times a b)
	(cond
		[(Z? a) (make-Z)]
		;; hould be reduced to ((a-1) * b) + b	
		[(S? a) (plus
			;; the template suggest S-pred. pred also works
			(times (S-pred a) b) 
			b)]))
			
;; 0 * 1 = 0
(check-expect (times zero one) zero)
;; 2 * 1 = 2
(check-expect (times two one) two)


(define (compare a b)
	(cond
	;; template leaves this case to fill in, should look at b
	[(Z? a) (if (Z? b) 'equal 'less)]
	;; from template
	[(S? a) (if (Z? b)
		'greater
		(compare (S-pred a)
		(S-pred b)))]))
;; 0 * 0 = 0
(check-expect (times (make-Z) (make-Z)) (make-Z))
;; 0 * 1 = 0
(check-expect (times (make-Z) (make-S (make-Z))) (make-Z))
;; 2 * 1 = 2
(check-expect (times (make-S (make-S (make-Z)))
                       (make-S (make-Z)))
              (make-S (make-S (make-Z))))
              
              
#lang htdp/bsl
(define (sum-factors n max-factor)
	(cond
	[(zero? max-factor) 0]
	[(positive? max-factor)
	;; (+ (if (zero? (remainder n max-factor)) max-factor 0)
		(sum-factors n (sub1 max-factor)))
		
	(if (zero? (remainder n max-factor))
		(+ max-factor (sum-factors n (sub1 max-factor)))
		(sum-factors n (sub1 max-factor)))
	]))
;; 1+2+3 = 6
(check-expect (sum-factors 6 5) 6)
	


